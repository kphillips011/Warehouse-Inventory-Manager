Index: src/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// imports\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.text.DecimalFormat;\nimport java.text.SimpleDateFormat;\nimport java.util.*;\nimport java.util.concurrent.TimeUnit;\n\n// the main program reads a file stream of input 'items' and adds them to our inventory, output a\n// file\npublic class Main {\n\n  static Inventory inv = new Inventory(new TreeMap<Integer, Product>());\n\n  public static void main(final String[] args) {\n    String name = \"inventoryIn.txt\";\n    readFile(name);\n    // automatically sorted by ascending ID, since it is a TreeMap\n    writeFile();\n    inv.sortDescendingID();\n    writeFile();\n    inv.sortAscendingName();\n    writeFile();\n    inv.sortDescendingName();\n    writeFile();\n    inv.sortAscendingPrice();\n    writeFile();\n    inv.sortDescendingPrice();\n    writeFile();\n    inv.sortAscendingQuantity();\n    writeFile();\n    inv.sortDescendingQuantity();\n    writeFile();\n\n    System.out.printf(\"average price of inventory: $%.2f %n\", inv.averagePrice());\n  }\n\n  // Reads input file and adds elements in file to inventory\n  // Checks if ID of product is already in system, if so just adds quantity\n  static void readFile(String fileName) {\n    final File file = new File(fileName);\n    try {\n      final Scanner fileReader = new Scanner(file);\n\n      while (fileReader.hasNext()) {\n        int id = fileReader.nextInt();\n        String name = fileReader.next();\n        while (fileReader.hasNext()) {\n          if (fileReader.hasNextDouble() || fileReader.hasNextInt()) {\n            break;\n          } else {\n            name += \" \" + fileReader.next();\n          }\n        }\n        double price = fileReader.nextDouble();\n        int quantity = fileReader.nextInt();\n        if (inv.getMap().containsKey(id)) {\n          inv.addItem(id, quantity);\n        } else {\n          inv.addProduct(new Product(id, name, price, quantity));\n        }\n      }\n      fileReader.close();\n    } catch (FileNotFoundException e) {\n      System.out.println(\"No file found.\");\n      e.printStackTrace();\n    }\n  }\n\n  // Creates a log file of all products in the inventory to the program directory\n  // Log file name is always different so it does not overwrite old log file (plus waits 1 second to\n  // verify no overwritten name)\n  // Writes to the log file using the fileFormat method as the String\n  static void writeFile() {\n    final String date = new SimpleDateFormat(\"MM-dd-yyyy_hh-mm-ss-SS\").format(new Date());\n    final String fileName = (\"log_\" + date + \".md\");\n    final File newFile = new File(fileName);\n    try {\n      System.out.println(\"Log file created successfully.\");\n      newFile.createNewFile();\n    } catch (IOException e) {\n      System.out.println(\"Log file creation error.\");\n      e.printStackTrace();\n    }\n    try {\n      final FileWriter writer = new FileWriter(fileName);\n      writer.write(\"#Warehouse Inventory Log: \" + date + \"  \" + System.lineSeparator());\n      writer.write(fileFormat());\n      writer.close();\n    } catch (IOException e) {\n      System.out.println(\"An error occurred while writing to file.\");\n      e.printStackTrace();\n    }\n    try {\n      TimeUnit.MILLISECONDS.sleep(1);\n    } catch (InterruptedException e) {\n      System.out.println(\"Sleep did not work.\");\n      e.printStackTrace();\n    }\n  }\n\n  // Format for the writeFile method to use\n  // Structured in markdown syntax to create a table of all the products in the inventory\n  // The lineSeparator() is unnecessary but used for ease of reading before the format to markdown\n  public static String fileFormat() {\n    final StringBuilder format = new StringBuilder();\n    format.append(\"| ID | Name | Price | Quantity |\" + \"  \" + System.lineSeparator());\n    format.append(\n        \"| :------------: | :------------: | :-------------: | :------------: |\"\n            + \"  \"\n            + System.lineSeparator());\n    for (Map.Entry<Integer, Product> i : inv.getMap().entrySet()) {\n      format.append(\n          \"| \" + i.getKey() + \" | \" + i.getValue().toString() + \"  \" + System.lineSeparator());\n    }\n    final DecimalFormat df = new DecimalFormat((\"###.##\"));\n    format.append(\n        \"| **Total** | **...** | **\"\n            + df.format(inv.totalValue())\n            + \"** | **\"\n            + inv.totalQuantity()\n            + \"** |\");\n    return format.toString();\n  }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/Main.java	(revision 091ff61678ec346013c8ea5217af253faa489423)
+++ src/Main.java	(date 1587954685880)
@@ -16,7 +16,10 @@
 
   public static void main(final String[] args) {
     String name = "inventoryIn.txt";
+
     readFile(name);
+    // TODO print search method results for each search method
+    // TODO show adding/removing products, quantity, etc
     // automatically sorted by ascending ID, since it is a TreeMap
     writeFile();
     inv.sortDescendingID();
@@ -34,6 +37,7 @@
     inv.sortDescendingQuantity();
     writeFile();
 
+    // print average price of inventory
     System.out.printf("average price of inventory: $%.2f %n", inv.averagePrice());
   }
 
