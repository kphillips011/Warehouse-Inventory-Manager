Index: test/InventoryTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import org.junit.jupiter.api.AfterEach;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.TreeMap;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\npublic class InventoryTest {\n\n    Inventory SUT;\n    private static final double DELTA = 0.000001;\n\n    @BeforeEach\n    public void setUp() {\n        SUT = new Inventory(new HashMap<Integer,Product>());\n        SUT.addProduct(\"prod 1\",1.11,1);\n        SUT.addProduct(\"prod 2\",2.22,2);\n        //SUT.addProduct(new Product(20, \"unnamed\", 20.0, 200)); used for testing that sorting by ID works\n        SUT.addProduct(\"prod 3\",3.33,3);\n        //SUT.addProduct(new Product(10, \"named\", 10.0, 100)); used for testing that sorting by ID works\n    }\n\n    @AfterEach\n    public void tearDown() {\n        SUT = null;\n    }\n\n    @Test\n    public void testEmpty() {\n        SUT.getMap().clear();\n        assertTrue(SUT.getMap().isEmpty());\n    }\n\n    @Test\n    public void testNonEmpty() {\n        assertFalse(SUT.getMap().isEmpty());\n    }\n\n    @Test\n    public void testAddProduct() {\n        SUT.addProduct(\"prod 4\",4.44,4);\n        assertTrue(SUT.getMap().containsKey(4));\n    }\n\n    @Test\n    public void testAddItem() {\n        assertTrue(SUT.addItem(1,1));\n        assertEquals(2,SUT.getMap().get(1).getQuantity());\n    }\n\n    @Test\n    public void testAddItem2() {\n        assertTrue(SUT.addItem(3,3));\n        assertEquals(6,SUT.getMap().get(3).getQuantity());\n    }\n\n    @Test\n    public void testAddItemFalse() {\n        assertFalse(SUT.addItem(3,0));\n        assertEquals(3,SUT.getMap().get(3).getQuantity());\n    }\n\n    @Test\n    public void testAddItemFalse2() {\n        assertFalse(SUT.addItem(1,-1));\n        assertEquals(1,SUT.getMap().get(1).getQuantity());\n    }\n\n    @Test\n    public void testRemoveProduct() {\n        assertTrue(SUT.removeProduct(3));\n        assertFalse(SUT.getMap().containsKey(3));\n    }\n\n    @Test\n    public void testRemoveProductFalse() {\n        assertFalse(SUT.removeProduct(4));\n    }\n\n    @Test\n    public void testRemoveProductFalse2() {\n        assertFalse(SUT.removeProduct(-1));\n    }\n\n    @Test\n    public void testRemoveItem() {\n        assertTrue(SUT.removeItem(3,1));\n        assertEquals(2,SUT.getMap().get(3).getQuantity());\n    }\n\n    @Test\n    public void testRemoveItem2() {\n        assertTrue(SUT.removeItem(3,10));\n        assertEquals(0,SUT.getMap().get(3).getQuantity());\n    }\n\n    @Test\n    public void testRemoveItemFalse() {\n        assertFalse(SUT.removeItem(2, 0));\n        assertEquals(2, SUT.getMap().get(2).getQuantity());\n    }\n\n    @Test\n    public void testRemoveItemFalse2() {\n        assertFalse(SUT.removeItem(3, -1));\n        assertEquals(3, SUT.getMap().get(3).getQuantity());\n    }\n\n    @Test\n    public void testSortAscendingID() {\n        SUT.sortAscendingID();\n        System.out.println(SUT.toString());\n    }\n\n    @Test\n    public void testSortDescendingID() {\n        SUT.sortDescendingID();\n        System.out.println(SUT.toString());\n    }\n\n    /*@Test\n    public void testSortAscendingQuantity() {\n        // TODO\n    }\n\n    @Test\n    public void testSortDescendingQuantity() {\n        // TODO\n    }\n\n    @Test\n    public void testSortAscendingPrice() {\n        // TODO\n    }\n\n    @Test\n    public void testSortDescendingPrice() {\n        SUT.sortDescendingPrice();\n        for (Map.Entry<Integer,Product> entry : SUT.getMap().entrySet()) {\n            System.out.println(entry.getKey() + \" \" + entry.getValue().getPrice());\n        }\n    }*/\n\n    @Test\n    public void testTotalValue()\n    {\n        assertEquals(15.54, SUT.totalValue(), DELTA);\n    }\n\n    @Test\n    public void testTotalValue2()\n    {\n        SUT.addItem(3,1);\n        assertEquals(18.87, SUT.totalValue(), DELTA);\n    }\n\n    @Test\n    public void testTotalQuantity()\n    {\n        assertEquals(6, SUT.totalQuantity());\n    }\n\n    @Test\n    public void testTotalQuantity2()\n    {\n        SUT.addItem(1,4);\n        assertEquals(10, SUT.totalQuantity());\n    }\n\n    @Test\n    public void testAveragePrice() {\n        assertEquals(2.59,SUT.averagePrice(), DELTA);\n    }\n\n    @Test\n    public void testAveragePrice2() {\n        SUT.removeProduct(2);\n        assertEquals(2.775,SUT.averagePrice(), DELTA);\n    }\n\n    @Test\n    public void testFindLowestPricedItem() {\n        assertEquals(1,SUT.findLowestPricedItem());\n    }\n\n    @Test\n    public void testFindLowestPricedItem2() {\n        SUT.addProduct(\"prod 4\", 1.00, 1);\n        assertEquals(4,SUT.findLowestPricedItem());\n    }\n\n    @Test\n    public void testFindHighestPricedItem() {\n        assertEquals(3,SUT.findHighestPricedItem());\n    }\n\n    @Test\n    public void testFindHighestPricedItem2() {\n        SUT.addProduct(\"prod 4\", 30.00, 1);\n        assertEquals(4,SUT.findHighestPricedItem());\n    }\n\n    @Test\n    public void testFindLowestQuantityItem() {\n        assertEquals(1,SUT.findLowestQuantityItem());\n    }\n\n    @Test\n    public void testFindLowestQuantityItem2() {\n        SUT.addItem(1,4);\n        assertEquals(2,SUT.findLowestQuantityItem());\n    }\n\n    @Test\n    public void testFindHighestQuantityItem() {\n        assertEquals(3,SUT.findHighestQuantityItem());\n    }\n\n    @Test\n    public void testFindHighestQuantityItem2() {\n        SUT.addItem(1,30);\n        assertEquals(1,SUT.findHighestQuantityItem());\n    }\n\n    @Test\n    public void testFindProduct()\n    {\n        assertEquals(2, SUT.findProduct(\"prod 2\"));\n    }\n\n    @Test\n    public void testFindProduct2()\n    {\n        assertEquals(2, SUT.findProduct(\"Prod 2\"));\n    }\n\n    @Test\n    public void testFindProduct3()\n    {\n        assertEquals(-1, SUT.findProduct(\"prod2\"));\n    }\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- test/InventoryTest.java	(revision 09c05de0b1d9383251b25e562b9c6f8a7186c749)
+++ test/InventoryTest.java	(date 1587770026935)
@@ -1,12 +1,7 @@
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
-
-import java.util.Collections;
 import java.util.HashMap;
-import java.util.Map;
-import java.util.TreeMap;
-
 import static org.junit.jupiter.api.Assertions.*;
 
 public class InventoryTest {
